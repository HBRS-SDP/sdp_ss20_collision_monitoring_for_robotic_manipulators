.TH "Line" 3 "Wed Jun 24 2020" "Collision monitoring for robotic manipulators" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Line \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <primitives\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLine\fP (Eigen::Vector3d basePoint, Eigen::Vector3d endPoint)"
.br
.ti -1c
.RI "Eigen::Vector3d \fBgetBasePoint\fP ()"
.br
.ti -1c
.RI "Eigen::Vector3d \fBgetEndPoint\fP ()"
.br
.ti -1c
.RI "Eigen::Vector3d \fBgetClosestPointToPoint\fP (Eigen::Vector3d point)"
.br
.ti -1c
.RI "void \fBgetClosestPointsBetweenLines\fP (Eigen::MatrixXd &closestPoints, \fBLine\fP line)"
.br
.ti -1c
.RI "double \fBgetShortestDistanceToPoint\fP (Eigen::Vector3d point)"
.br
.ti -1c
.RI "double \fBgetShortestDistanceToLine\fP (\fBLine\fP line)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Class to help calculate the closest distance between primitives\&.
.PP
This class describes a line using two points (represented as Eigen's Vector3D) 
.PP
Definition at line 116 of file primitives\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Line::Line (Eigen::Vector3d basePoint, Eigen::Vector3d endPoint)"
Constructor of the \fBLine\fP class
.PP
\fBParameters:\fP
.RS 4
\fIbasePoint\fP start point of the line represented with a Vector3d\&. 
.br
\fIendPoint\fP end point of the line represented with a Vector3d\&. 
.RE
.PP

.PP
Definition at line 6 of file primitives\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "Eigen::Vector3d Line::getBasePoint ()"
Getter of the base point
.PP
\fBReturns:\fP
.RS 4
A vector3d object with the base point\&. 
.RE
.PP

.PP
Definition at line 15 of file primitives\&.cpp\&.
.SS "void Line::getClosestPointsBetweenLines (Eigen::MatrixXd & closestPoints, \fBLine\fP line)"
Finds the closest points on this \fBLine\fP and on another \fBLine\fP
.PP
This method takes a point and returns the closest point on this \fBLine\fP and the given line\&. returns a Vector3d\&.
.PP
\fBParameters:\fP
.RS 4
\fIline\fP a line represented with a Vector3d\\ 
.RE
.PP
\fBReturns:\fP
.RS 4
the closests points on this line and on line 
.RE
.PP

.PP
Definition at line 59 of file primitives\&.cpp\&.
.SS "Eigen::Vector3d Line::getClosestPointToPoint (Eigen::Vector3d point)"
Finds the closest point on this \fBLine\fP to a point
.PP
This method takes a point and returns the closest point on this \fBLine\fP and the given point\&. returns a Vector3d\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP a point space represented with a Vector3d\\ 
.RE
.PP
\fBReturns:\fP
.RS 4
the closest point on this \fBLine\fP to point 
.RE
.PP

.PP
Definition at line 35 of file primitives\&.cpp\&.
.SS "Eigen::Vector3d Line::getEndPoint ()"
Getter of the end point
.PP
\fBReturns:\fP
.RS 4
A vector3d object with the end point\&. 
.RE
.PP

.PP
Definition at line 19 of file primitives\&.cpp\&.
.SS "double Line::getShortestDistanceToLine (\fBLine\fP line)"
Finds the shortest distance between this \fBLine\fP and another \fBLine\fP
.PP
This method takes a \fBLine\fP and returns the closest distance between this \fBLine\fP and the given line\&. returns a double value\&.
.PP
\fBParameters:\fP
.RS 4
\fIline\fP a line represented with a Vector3d\\ 
.RE
.PP
\fBReturns:\fP
.RS 4
the closest distance between the \fBLine\fP and line 
.RE
.PP

.PP
Definition at line 103 of file primitives\&.cpp\&.
.SS "double Line::getShortestDistanceToPoint (Eigen::Vector3d point)"
Finds the shortest distance between this \fBLine\fP and a point
.PP
This method takes a point and returns the closest distance between this \fBLine\fP and the given point\&. returns a double value\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP a point space represented with a Vector3d\\ 
.br
\fIclosestPoints\fP the closest distance between the \fBLine\fP and point 
.RE
.PP

.PP
Definition at line 92 of file primitives\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Collision monitoring for robotic manipulators from the source code\&.
