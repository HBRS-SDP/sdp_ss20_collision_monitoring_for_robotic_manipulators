.TH "Primitive" 3 "Wed Jun 24 2020" "Collision monitoring for robotic manipulators" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Primitive \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <primitives\&.h>\fP
.PP
Inherited by \fBCapsule\fP, and \fBSphere\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBgetShortestDirection\fP (Eigen::Vector3d &shortestDirection, \fBPrimitive\fP *primitive)=0"
.br
.ti -1c
.RI "virtual void \fBgetShortestDirection\fP (Eigen::Vector3d &shortestDirection, \fBCapsule\fP *capsule)=0"
.br
.ti -1c
.RI "virtual void \fBgetShortestDirection\fP (Eigen::Vector3d &shortestDirection, \fBSphere\fP *sphere)=0"
.br
.ti -1c
.RI "virtual double \fBgetShortestDistance\fP (\fBPrimitive\fP *primitive)=0"
.br
.ti -1c
.RI "virtual double \fBgetShortestDistance\fP (\fBCapsule\fP *capsule)=0"
.br
.ti -1c
.RI "virtual double \fBgetShortestDistance\fP (\fBSphere\fP *sphere)=0"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "Eigen::Matrix4d \fBpose\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
An abstract class that contains the basic attributes of all primitives
.PP
This abstract class gets inherited by all primitive shapes\&. All shapes have a pose expressed by a Eigen Matrix4d, and a family of methods to get the shortest distrance from this primitive to another one depending the class of the latter\&. 
.PP
Definition at line 30 of file primitives\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void Primitive::getShortestDirection (Eigen::Vector3d & shortestDirection, \fBPrimitive\fP * primitive)\fC [pure virtual]\fP"
Performs a dynamic cast to overload the direction functions
.PP
This method takes an object that inherits from primitive and performs a dynamic cast to call the correct getShortestDirection method depending on the class of the shape\&.
.PP
\fBParameters:\fP
.RS 4
\fIprimitive\fP address of the primitive object\&. 
.br
\fIshortestDirection\fP a vector in 3D that represents the closes direction between this and the second primitive\&. 
.RE
.PP

.PP
Implemented in \fBSphere\fP, and \fBCapsule\fP\&.
.SS "virtual void Primitive::getShortestDirection (Eigen::Vector3d & shortestDirection, \fBCapsule\fP * capsule)\fC [pure virtual]\fP"
Finds the shortest distance between this primitive and a \fBCapsule\fP primitive
.PP
This method takes a capsule object and returns the closest direction between this primitive and a capsule object\&.
.PP
\fBParameters:\fP
.RS 4
\fIcapsule\fP address of the primitive object 
.br
\fIshortestDirection\fP a vector in 3D that represents the closes direction between the primitive and capsule 
.RE
.PP

.PP
Implemented in \fBSphere\fP, and \fBCapsule\fP\&.
.SS "virtual void Primitive::getShortestDirection (Eigen::Vector3d & shortestDirection, \fBSphere\fP * sphere)\fC [pure virtual]\fP"
Finds the shortest distance between this primitive and a \fBSphere\fP primitive
.PP
This method takes a capsule object and returns the closest direction between this primitive and a sphere object\&. returns a Vector3d\&.
.PP
\fBParameters:\fP
.RS 4
\fIsphere\fP address of the primitive object 
.br
\fIshortestDirection\fP a vector in 3D that represents the closes direction between the primitive and sphere 
.RE
.PP

.PP
Implemented in \fBSphere\fP, and \fBCapsule\fP\&.
.SS "virtual double Primitive::getShortestDistance (\fBPrimitive\fP * primitive)\fC [pure virtual]\fP"
Performs a dynamic cast to overload the distance functions
.PP
This method takes an object that inherits from primitive and performs a dynamic cast to call the correct getShortestDistance method depending on the class of the shape\&. returns a double value\&.
.PP
\fBParameters:\fP
.RS 4
\fIprimitive\fP address of the primitive object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the closest distance between this and the second primitive\&. 
.RE
.PP

.PP
Implemented in \fBSphere\fP, and \fBCapsule\fP\&.
.SS "virtual double Primitive::getShortestDistance (\fBCapsule\fP * capsule)\fC [pure virtual]\fP"
Finds the shortest distance between this primitive and a \fBCapsule\fP primitive
.PP
This method takes a capsule object and returns the closest distance between this primitive and a capsule object\&. returns a double value\&.
.PP
\fBParameters:\fP
.RS 4
\fIcapsule\fP address of the primitive object 
.RE
.PP
\fBReturns:\fP
.RS 4
the closest distance between the primitive and capsule 
.RE
.PP

.PP
Implemented in \fBSphere\fP, and \fBCapsule\fP\&.
.SS "virtual double Primitive::getShortestDistance (\fBSphere\fP * sphere)\fC [pure virtual]\fP"
Finds the shortest distance between this primitive and a \fBSphere\fP primitive
.PP
This method takes a capsule object and returns the closest distance between this primitive and a sphere object\&. returns a double value\&.
.PP
\fBParameters:\fP
.RS 4
\fIsphere\fP address of the primitive object 
.RE
.PP
\fBReturns:\fP
.RS 4
the closest distance between the primitive and sphere 
.RE
.PP

.PP
Implemented in \fBSphere\fP, and \fBCapsule\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "Eigen::Matrix4d Primitive::pose"
Finds the shortest distance between this primitive and a Cylinder primitive
.PP
This method takes a capsule object and returns the closest distance between this primitive and a cylinder object\&. returns a double value\&.
.PP
\fBParameters:\fP
.RS 4
\fIcylinder\fP address of the primitive object 
.RE
.PP
\fBReturns:\fP
.RS 4
the closest distance between the primitive and cylinder 
.RE
.PP

.PP
Definition at line 106 of file primitives\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Collision monitoring for robotic manipulators from the source code\&.
